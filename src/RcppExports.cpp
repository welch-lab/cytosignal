// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gauss_vec_cpp
NumericVector gauss_vec_cpp(NumericVector x, double sigma);
RcppExport SEXP _cytosignal_gauss_vec_cpp(SEXP xSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_vec_cpp(x, sigma));
    return rcpp_result_gen;
END_RCPP
}
// gauss_vec_inplace_cpp
void gauss_vec_inplace_cpp(NumericVector& x, const double sigma);
RcppExport SEXP _cytosignal_gauss_vec_inplace_cpp(SEXP xSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    gauss_vec_inplace_cpp(x, sigma);
    return R_NilValue;
END_RCPP
}
// rep_each_cpp
arma::vec rep_each_cpp(int l, int n);
RcppExport SEXP _cytosignal_rep_each_cpp(SEXP lSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_each_cpp(l, n));
    return rcpp_result_gen;
END_RCPP
}
// meanMat_cpp
arma::sp_mat meanMat_cpp(const List& l, int nrow, int ncol);
RcppExport SEXP _cytosignal_meanMat_cpp(SEXP lSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(meanMat_cpp(l, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// stdMat_cpp
arma::mat stdMat_cpp(const arma::mat& x);
RcppExport SEXP _cytosignal_stdMat_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stdMat_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// pearson_col_cpp
arma::vec pearson_col_cpp(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _cytosignal_pearson_col_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_col_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cbind_list
arma::sp_mat cbind_list(List& sparse_matrix_list);
RcppExport SEXP _cytosignal_cbind_list(SEXP sparse_matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type sparse_matrix_list(sparse_matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(cbind_list(sparse_matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// rbind_list
arma::sp_mat rbind_list(List sparse_matrix_list);
RcppExport SEXP _cytosignal_rbind_list(SEXP sparse_matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sparse_matrix_list(sparse_matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(rbind_list(sparse_matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// euclidean_elementwise_cpp
NumericVector euclidean_elementwise_cpp(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _cytosignal_euclidean_elementwise_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean_elementwise_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cleanLRscore_sparse_cpp
arma::sp_mat cleanLRscore_sparse_cpp(arma::uvec i, arma::uvec p, arma::colvec x, const int nrow, const int ncol);
RcppExport SEXP _cytosignal_cleanLRscore_sparse_cpp(SEXP iSEXP, SEXP pSEXP, SEXP xSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< const int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(cleanLRscore_sparse_cpp(i, p, x, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// select_EB_rcpp2
arma::sp_mat select_EB_rcpp2(const arma::mat& loc, const double eps);
RcppExport SEXP _cytosignal_select_EB_rcpp2(SEXP locSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type loc(locSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_EB_rcpp2(loc, eps));
    return rcpp_result_gen;
END_RCPP
}
// inferScoreLR_cpp
arma::mat inferScoreLR_cpp(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list);
RcppExport SEXP _cytosignal_inferScoreLR_cpp(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    rcpp_result_gen = Rcpp::wrap(inferScoreLR_cpp(dge_lig, dge_recep, lig_index, lig_list, recep_index, recep_list));
    return rcpp_result_gen;
END_RCPP
}
// inferVeloLR_cpp
arma::mat inferVeloLR_cpp(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::mat& dge_lig_velo, const arma::mat& dge_recep_velo, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list);
RcppExport SEXP _cytosignal_inferVeloLR_cpp(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP dge_lig_veloSEXP, SEXP dge_recep_veloSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig_velo(dge_lig_veloSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep_velo(dge_recep_veloSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    rcpp_result_gen = Rcpp::wrap(inferVeloLR_cpp(dge_lig, dge_recep, dge_lig_velo, dge_recep_velo, lig_index, lig_list, recep_index, recep_list));
    return rcpp_result_gen;
END_RCPP
}
// graphNicheLR_cpp
arma::mat graphNicheLR_cpp(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list, const arma::uvec& nb_index, const arma::uvec& nb_list);
RcppExport SEXP _cytosignal_graphNicheLR_cpp(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP, SEXP nb_indexSEXP, SEXP nb_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_index(nb_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_list(nb_listSEXP);
    rcpp_result_gen = Rcpp::wrap(graphNicheLR_cpp(dge_lig, dge_recep, lig_index, lig_list, recep_index, recep_list, nb_index, nb_list));
    return rcpp_result_gen;
END_RCPP
}
// VelographNicheLR_cpp
arma::mat VelographNicheLR_cpp(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::mat& dge_velo, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list, const arma::uvec& nb_index, const arma::uvec& nb_list);
RcppExport SEXP _cytosignal_VelographNicheLR_cpp(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP dge_veloSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP, SEXP nb_indexSEXP, SEXP nb_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_velo(dge_veloSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_index(nb_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_list(nb_listSEXP);
    rcpp_result_gen = Rcpp::wrap(VelographNicheLR_cpp(dge_lig, dge_recep, dge_velo, lig_index, lig_list, recep_index, recep_list, nb_index, nb_list));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rank_matrix_dgc
std::vector<std::list<float> > cpp_rank_matrix_dgc(arma::vec& x, const arma::vec& p, int nrow, int ncol);
RcppExport SEXP _cytosignal_cpp_rank_matrix_dgc(SEXP xSEXP, SEXP pSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rank_matrix_dgc(x, p, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// rowAggregateSum_sparse
arma::mat rowAggregateSum_sparse(arma::sp_mat& X, const arma::uvec& groups, unsigned ngroups);
RcppExport SEXP _cytosignal_rowAggregateSum_sparse(SEXP XSEXP, SEXP groupsSEXP, SEXP ngroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ngroups(ngroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(rowAggregateSum_sparse(X, groups, ngroups));
    return rcpp_result_gen;
END_RCPP
}
// colAggregateSum_sparse
arma::mat colAggregateSum_sparse(arma::sp_mat& X, const arma::uvec& groups, unsigned ngroups);
RcppExport SEXP _cytosignal_colAggregateSum_sparse(SEXP XSEXP, SEXP groupsSEXP, SEXP ngroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ngroups(ngroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(colAggregateSum_sparse(X, groups, ngroups));
    return rcpp_result_gen;
END_RCPP
}
// colNNZAggr_sparse
arma::mat colNNZAggr_sparse(arma::sp_mat& X, const arma::uvec& groups, unsigned ngroups);
RcppExport SEXP _cytosignal_colNNZAggr_sparse(SEXP XSEXP, SEXP groupsSEXP, SEXP ngroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ngroups(ngroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(colNNZAggr_sparse(X, groups, ngroups));
    return rcpp_result_gen;
END_RCPP
}
// rowNNZAggr_sparse
arma::mat rowNNZAggr_sparse(arma::sp_mat& X, const arma::uvec& groups, unsigned ngroups);
RcppExport SEXP _cytosignal_rowNNZAggr_sparse(SEXP XSEXP, SEXP groupsSEXP, SEXP ngroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ngroups(ngroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(rowNNZAggr_sparse(X, groups, ngroups));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cytosignal_gauss_vec_cpp", (DL_FUNC) &_cytosignal_gauss_vec_cpp, 2},
    {"_cytosignal_gauss_vec_inplace_cpp", (DL_FUNC) &_cytosignal_gauss_vec_inplace_cpp, 2},
    {"_cytosignal_rep_each_cpp", (DL_FUNC) &_cytosignal_rep_each_cpp, 2},
    {"_cytosignal_meanMat_cpp", (DL_FUNC) &_cytosignal_meanMat_cpp, 3},
    {"_cytosignal_stdMat_cpp", (DL_FUNC) &_cytosignal_stdMat_cpp, 1},
    {"_cytosignal_pearson_col_cpp", (DL_FUNC) &_cytosignal_pearson_col_cpp, 2},
    {"_cytosignal_cbind_list", (DL_FUNC) &_cytosignal_cbind_list, 1},
    {"_cytosignal_rbind_list", (DL_FUNC) &_cytosignal_rbind_list, 1},
    {"_cytosignal_euclidean_elementwise_cpp", (DL_FUNC) &_cytosignal_euclidean_elementwise_cpp, 2},
    {"_cytosignal_cleanLRscore_sparse_cpp", (DL_FUNC) &_cytosignal_cleanLRscore_sparse_cpp, 5},
    {"_cytosignal_select_EB_rcpp2", (DL_FUNC) &_cytosignal_select_EB_rcpp2, 2},
    {"_cytosignal_inferScoreLR_cpp", (DL_FUNC) &_cytosignal_inferScoreLR_cpp, 6},
    {"_cytosignal_inferVeloLR_cpp", (DL_FUNC) &_cytosignal_inferVeloLR_cpp, 8},
    {"_cytosignal_graphNicheLR_cpp", (DL_FUNC) &_cytosignal_graphNicheLR_cpp, 8},
    {"_cytosignal_VelographNicheLR_cpp", (DL_FUNC) &_cytosignal_VelographNicheLR_cpp, 9},
    {"_cytosignal_cpp_rank_matrix_dgc", (DL_FUNC) &_cytosignal_cpp_rank_matrix_dgc, 4},
    {"_cytosignal_rowAggregateSum_sparse", (DL_FUNC) &_cytosignal_rowAggregateSum_sparse, 3},
    {"_cytosignal_colAggregateSum_sparse", (DL_FUNC) &_cytosignal_colAggregateSum_sparse, 3},
    {"_cytosignal_colNNZAggr_sparse", (DL_FUNC) &_cytosignal_colNNZAggr_sparse, 3},
    {"_cytosignal_rowNNZAggr_sparse", (DL_FUNC) &_cytosignal_rowNNZAggr_sparse, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_cytosignal(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
